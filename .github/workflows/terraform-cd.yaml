name: Terraform CD

on:
  push:
    branches: [ "main" ]
    paths:
      - "**/*.tf"
      - ".terraform.lock.hcl"
      - ".github/workflows/terraform-cd.yaml"   # <-- make sure your file is .yaml
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  TF_WORKING_DIR: .
  TF_IN_AUTOMATION: true
  TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

concurrency:
  group: tf-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  apply:
    name: terraform apply (prod)
    runs-on: ubuntu-latest
    environment:
      name: prod   # requires approval in Environments
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure TF plugin cache dir exists
        run: mkdir -p "$TF_PLUGIN_CACHE_DIR"

      # cache ONLY the plugin cache (never ./.terraform)
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: tf-plugins-${{ runner.os }}-${{ hashFiles('**/*.tf', '.terraform.lock.hcl') }}
          restore-keys: |
            tf-plugins-${{ runner.os }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Who am I?
        run: aws sts get-caller-identity

      - name: Clean previous TF dir
        run: rm -rf .terraform

      - name: Init backend
        run: terraform init -input=false -reconfigure -upgrade

      - name: Select/create workspace
        run: terraform workspace select prod || terraform workspace new prod

      - name: Validate
        run: terraform validate -no-color

      - name: Plan (for logs)
        env:
          MY_IP: ${{ vars.MY_IP }}   # e.g. 203.0.113.42/32
        run: terraform plan -input=false -no-color -out=plan.out -var "my_ip=${MY_IP}"

      - name: Apply
        run: terraform apply -input=false -auto-approve plan.out

      - name: Show state summary
        if: always()
        run: terraform show -no-color

      - name: Confirm remote state path (snippet)
        if: always()
        run: terraform state pull | head -c 200 || true

      - name: Upload plan (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tf-plan
          path: plan.out
          if-no-files-found: ignore

      - name: Terraform version
        run: terraform version
