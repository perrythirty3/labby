name: Terraform CI

on:
  pull_request:

permissions:
  contents: read
  id-token: write   # for OIDC if we assume a role

concurrency:
  group: tf-ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  tf-ci:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ROLE_ARN: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      MY_IP: ${{ secrets.MY_IP }}                   # may be empty
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create plugin cache dir
        run: mkdir -p "$TF_PLUGIN_CACHE_DIR"

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-tf-plugin-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-plugin-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # Default MY_IP here (removes invalid expression warning)
      - name: Set TF var defaults
        shell: bash
        run: |
          echo "TF_VAR_my_ip=${MY_IP:-0.0.0.0/32}" >> "$GITHUB_ENV"

      # Only assume role when PR originates from same repo (no secrets in forks)
      - name: Configure AWS (OIDC)
        if: github.event.pull_request.head.repo.full_name == github.repository
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I?
        if: github.event.pull_request.head.repo.full_name == github.repository
        run: aws sts get-caller-identity

      - name: Clean previous TF dir
        run: rm -rf .terraform

      - name: Init backend
        run: terraform init -input=false -reconfigure -upgrade

      - name: Select/create workspace
        run: terraform workspace select prod || terraform workspace new prod

      - name: Format check
        run: terraform fmt -check -recursive

      - name: Validate
        run: terraform validate -no-color

      - name: Plan
        # For forked PRs, we still plan but itâ€™s against the local state (no secrets used).
        run: terraform plan -input=false -no-color -out=plan.out
