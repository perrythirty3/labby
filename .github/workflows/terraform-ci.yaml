name: Terraform CI

on:
  workflow_dispatch:
  pull_request:          # always run on PRs
  push:
    branches: [main]
    paths:
      - '**/*.tf'
      - '.terraform.lock.hcl'
      - '.github/workflows/terraform-ci.yaml'

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./

    env:
      # Optional: central plugin cache for faster CI
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ✅ Cache plugins only (do NOT cache ./.terraform)
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: tf-plugins-${{ runner.os }}-${{ hashFiles('**/*.tf', '.terraform.lock.hcl') }}
          restore-keys: |
            tf-plugins-${{ runner.os }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:chore
          terraform_version: 1.9.5
          terraform_wrapper: false

      - name: Ensure TF plugin cache dir exists
        run: mkdir -p ~/.terraform.d/plugin-cache


      - name: Terraform fmt
        run: terraform fmt -check -diff

      # ⬇️ Offline init so CI never touches S3/DynamoDB
      - name: Terraform init (no backend)
        run: |
          mkdir -p "$TF_PLUGIN_CACHE_DIR"
          terraform init -backend=false -input=false

      - name: Terraform validate
        run: terraform validate -no-color

      # --- Linters / security ---
      - name: Install TFLint
        run: |
          curl -sL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init

      - name: TFLint
        run: tflint --no-color

      - name: Install tfsec
        run: |
          curl -L https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -o /usr/local/bin/tfsec
          chmod +x /usr/local/bin/tfsec

      - name: tfsec (security scan)
        run: tfsec --minimum-severity HIGH

      # Optional: speculative plan *offline* (no AWS calls)
      - name: Terraform plan (offline)
        env:
          # If you have a repo variable MY_IP, we'll use it; else fall back to dummy
          MY_IP_INPUT: ${{ vars.MY_IP }}
        run: |
          MYIP="${MY_IP_INPUT:-0.0.0.0/32}"
          terraform plan -no-color -input=false -refresh=false -lock=false -out=tfplan -var "my_ip=$MYIP" || true

      - name: Show plan to text
        run: |
          if [ -f tfplan ]; then terraform show -no-color tfplan > plan.txt; else echo "No plan created." > plan.txt; fi

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: plan.txt

      - name: Comment plan on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: terraform-plan
          path: plan.txt
